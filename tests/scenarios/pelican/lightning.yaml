# A YAML file for configuring Lightning to support a Pelican site.

# TODO: rename to `lightning-pelican.yaml`. Define available generators in terms
#       of files named `lightning-<generator>.yaml` located in an installation
#       directory or some such.
# TODO: make a generator that creates sites based on these.
# TODO: generalize from the Pelican specifics here into a more general Lightning
#       configuration set.

# TODO: extract relevant bits from this into docs once I stabilize it a bit.

site_info:
  # The `title` field is required, since you can't create well-formed HTML
  # without a `<title>`.
  title: lx (lightning)

  # Note that Lightning will check your URL; if it's badly formed, we'll warn
  # you... and refuse to generate the site!
  url: https://lightning.rs  # I can wish and hope, right? And save my pennies.

  # A description for the site. This is optional, but strongly recommended. You
  # may leave the field out, or explicitly set it to null (`~`), if you do not
  # want to use it.
  description: >
    A ridiculously fast site generator and engine.

  # The `default_timezone` can be any of the full text strings specified by
  # [the `chrono_tz` crate][chrono_tz] (see **Modules**).
  #
  # [chrono_tz]: https://docs.rs/chrono-tz/
  #
  # If left blank, the *local* time where the site is generated will be used.

  # You may supply any other metadata you like, though only as key-value pairs.
  # Those pairs will be supplied to your templates as hashmaps. The default
  # value is null/`~` since no other metadata are assumed.
#  metadata: ~
    # foo: bar
    # quux: 42
    # baz: 13.3

# Specify the source for the content. It can be any folder at all; relative
# paths are resolved from the location of this configuration file.
content_directory: content

# Specify the destination for the generated site. As with the source directory,
# it can be any folder, and relative paths are resolved from the location of
# this configuration file.
#
# Tip: if you are using this with [GitHub Pages](https://pages.github.com), you
# may find it convenient to set this to "docs" so that you don't have to bother
# with `gh-pages` branch.
output_directory: output

# Define the structure of the site, by supplying the location of a set of
# templates to use in generating the site and a set of "taxonomies" which define
# the *relationships* on the site. A taxonomy is a way of categorizing something
# relative to other things---but "category" is an overloaded term, and one you
# may well want to use to define one of those taxonomies! Common taxonomies you
# see around the web are tags (and hashtags), categories, author, and date, each
# of which provides a way of organizing content. You can define as many
# taxonomies as you like, and they may overlap (or not) in whatever way you
# choose.
#
# The `structure` may be configured in two ways:
#
# 1. By specifying the site structure configuration under the `structure` key
#    directly, as in the configuraiton below.
# 2. By specifying another configuration files, whose contents are identical to
#    the contents of the `structure` below (i.e. there is no top-level
#    `structure` key, only the fields which otherwise compose it).
#
# TODO/aspirational:
# Lightning supplies default layouts to match the behavior of Jekyll, Pelican,
# and Hugo. If you'd like to contribute a generator, please open a pull request
# on the repository!
layout:
  # configuration: <path/to/lightning-structure.yaml>

  # The `directory` may be specified as a relative or absolute path. By default,
  # it is defined as a relative path from the root of the directory in which you
  # ran `lx init`. If you want to develop your site structure separately
  directory: layout

  # TODO/aspirational: Specify the template engine to use.
  # engine: handlebars

  # There are several required templates which are necessary to build any site.
  # The files themselves may be named whatever you like, but these keys must be
  # set and the corresponding files must exist at the specified paths within the
  # directory. Template paths here and as specified for taxonomies are
  # always relative paths from the `directory` specified above.
  #
  # For example, given a `directory` of `/Users/chris/my-blog/layout` and an
  # `index` of `weirdly/nested/index.html`, Lightning will expect the file to
  # exist at `/Users/chris/my-blog/layout/weirdly/nested/index.html`.
  #
  # Note that these use whatever extension you like; `.html` is merely usual.
  templates:
    # The `index` template renders the root of the site---the page the user
    # lands on first.
    index: index.html
    # The `item` specifies the layout of individual content items on the site.
    item: item.html

  # Define how to interpret taxonomies.
  taxonomy_rules:
    # Treat YAML string values made up of a comma-separated items as a *list*
    # instead of as a single string
    commas_as_lists: true

  # Each taxonomy may be one of "boolean", "categorical", "taglike", or
  # "temporal". These options are mutually exclusive: a taxonomy may use time
  # *or* it may define its own structure, but sad to say, we don't get to define
  # the structure of time itself (unless you're a [Time Lord], in which case I
  # would like to borrow your TARDIS).
  #
  # [Time Lord]: https://en.wikipedia.org/wiki/Time_Lord
  #
  # "TagLike"-type taxonomies have as many variants as you define. You might
  # have both "Tech" and "Art" as categories, for example. Boolean taxonomies do
  # not have tag-like variants; so e.g. in this setup an item is a "page" or it
  # is not---unlike the category taxonomy, where an item does not belong to the
  # "category" taxonomy so much as to one of the variants *within* the taxonomy.
  #
  # "Singular"-type taxonomies are simply a convenience for writing a "taglike"
  # taxonomy which allows only one item to belong to it.  For example, some blog
  # engines (e.g. Pelican) allow an item to belong to only a single category.
  # This is equivalent to specifying a `multiple`-type taxonomy (as below) with
  # `limit: 1`, but is common enough that it has its own syntax.
  #
  # The "default" key allows you to specify a default value for items.
  #
  # The "required" key may be set for any field which is required for all pieces
  # of content (e.g. on many sites, "author" might be required).
  #
  # Use the "limit" field to specify whether a multiple-variant taxonomy may
  # have more than one field applied. The field may be implicitly set to null
  # by leaving it out, or explicitly set to null with `~`. If set, it must be a
  # number greater than 0. (Other values will be treated as errors.) See
  # examples below.
  #
  # Use the `hierarchical` field to specify (`true` or `false`) whether a
  # taxonomy may be nested, e.g. "Parent Category -> Child Category".
  # Taxonomies are implicitly defined with `hierarchical: false` if the field
  # is not included explicitly.
  #
  # If you wish to enforce that all items have dates associated with them, you
  # can you use the `temporal` type and set `required` to `true`. The `required`
  # flag is ignored entirely on `boolean` types, where it would make no sense.
  #
  # Every taxonomy must have at least an `item` template key defined; it may
  # also have a `list` template key defined. The `list` template will receive
  # all variants of the taxonomy, with all items associated with that taxonomy.
  # The `item` template will receive TODO.
  # SM - To generate a feed for a taxonomy, specify a feed_item template for a
  # seperate feed for each item in the taxonomy and a feed_list template for a
  # single feed for everything with that tag.
  # 
  taxonomies:

    # Note that simply by leaving off the `limit` key, this taxonomy is
    # implicitly unlimited. In this case, that means you can have an arbitrary
    # number of authors for each post. Since there is no default tag, items
    # without tags set explicitly will not be associated with any tag. (You
    # could also specify this explicitly by setting `default: ~`.)
    author:
      type: taglike
      required: true
      hierarchical: false
      templates:
        list: authors.html  # All authors
        item: author.html  # Everything authored by me
        feed_list: feed_template.rss # RSS feed of all the authors
        feed_item: feed_template.rss # Generate an RSS feed for each author

    # `singular` taxonomies allow only a single entry in the taxonomy for any
    # specific item.
    #
    # Here, we also set a default category of "Blog", so any item which does not
    # specify a category will automatically be included in the "Blog" category.
    category:
      type: singular
      default: Blog
      required: false
      hierarchical: false
      templates:
        list: categories.html  # All categories
        item: category.html  # E.g. things categorized as "Tech"
        feed_list: feed_template.rss # RSS feed of all the categories
        feed_item: feed_template.rss # E.g. a feed for things categorized as "Tech"

    # `multiple` taxonomies are identical with `singular` taxonomies except that
    # they allow more than of the taxonomy item to appear. This is useful if,
    # for example, you wish to support a traditional `tag`-like taxonomy, or the
    # ability to nest categories. By default (i.e. if you do not include the
    # `limit` field), the taxonomy supports inclusion of an unlimited number of
    # taxonomy items.
    #
    # If we set a `limit` explicitly, the taxonomy allows only that many
    # variants per item. You could, for example, decide to keep your tagging
    # system sane by setting a limit of 5 tags per post: you wouldn't want
    # things to get out of hand, after all!
    #
    # You can also make an unlimited taxonomy explicitly, by setting the
    # `limit` to `~`, which is "null" in YAML. So here, a post may have as many
    # tags as you like.
    tag:
      type: taglike
      limit: ~
      required: false
      hierarchical: false
      templates:
        list: tags.html  # All tags
        item: tag.html  # Things tagged "rust"

    # Note: the `date` taxonomy is normally implicit, and automatically
    # associated with any piece of content stamped with a `date` field. You
    # only need to define it explicitly if you want to customize the associated
    # templates, or if you want to use something besides `date` to specify the
    # time stamp for a given item. The `limit` field here is *always* ignored.
    date:  # TODO: these might be wrong re:Pelican, so confirm
      type: temporal
      required: false
      # The `format` defaults to `"%Y-%m-%d %H:%M %P"`, which corresponds to
      # `2017-01-01 12:01 am` for 1 minute after midnight on January 1, 2017.
      # See [the formatting docs] for `chrono::format::strftime` function for
      # other options.
      #
      # [the formatting docs]: https://docs.rs/chrono/0.3.1/chrono/format/strftime/index.html#specifiers
      format:
      templates:
        list: period_archives.html
        item: archives.html

    # It is easy to define a page-style taxonomy: simply use `type: boolean` and
    # then on a piece of content set e.g. `page: true`. If you want all items to
    # belong to a taxonomy by default and to opt, you may set `default: true`.
    page:
      type: boolean
      # Note that in the case of a `boolean` template, the `list` template
      # defines a page which lists all pages.
      templates:
        # list: pages.html  # If I wanted a page where I listed all pages...
        item: page.html  # The template for each individual page

    series:
      type: singular
      hierarchical: false
      # The `fields` are used to specify a taxonomy when it includes more data
      # than simply the name. For example, in the case of a "series," the
      # series has a name, but each item in it also includes a "part", so that
      # an item is ultimately taxonomized as being something like
      # "Series Foo, Part 2" from input data like this:
      #
      # ```yaml
      # Series:
      #   Name: Foo
      #   Part: 2
      # ```
      #
      # `fields` may be `required` (the item will fail to build and an error
      # will be logged if the taxonomy is specified but not all its required
      # fields are set) or `optional` (the item will build fine).
      fields:
        required:
          - name
          - part
        optional: ~
      # Note that if `item` is not set, it will fall back to the default
      # item template.
      templates:
        list: series-list.html  # the list of all series on the site
        item: series.html  # the template for each individual series

  feeds:
    # SM - This is just for feeds for a combination of things. Normal feeds get 
    # generated from the templates section of each taxonomy
    Art and Tech:
      - category: art
      - category: tech
    Family Poetry:
      - tag: family
      - tag: poetry

  # Define rules for other content to include or exclude.
  other_content:
    copy:
      - static
      - extra

    exclude: ~

  # TODO: how to handle "formats", e.g. link-blog posts, images, etc. And, in my
  #       case, quotes, poetry, and so on.
