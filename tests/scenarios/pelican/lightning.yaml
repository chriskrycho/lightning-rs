# A YAML file for configuring Lightning to support a Pelican site.

# TODO: rename to `lightning-pelican.yaml`. Define available generators in terms
#       of files named `lightning-<generator>.yaml` located in an installation
#       directory or some such.
# TODO: make a generator that creates sites based on these.
# TODO: generalize from the Pelican specifics here into a more general Lightning
#       configuration set.

# TODO: extract relevant bits from this into docs once I stabilize it a bit.

site_info:
  # The `title` field is required, since you can't create well-formed HTML
  # without a `<title>`.
  title: lx (lightning)

  # Note that Lightning will check your URL; if it's badly formed, we'll warn
  # you... and refuse to generate the site!
  url: https://lightning.rs  # I can wish and hope, right? And save my pennies.

  # A description for the site. This is optional, but strongly recommended. You
  # may leave the field out, or explicitly set it to null (`~`), if you do not
  # want to use it.
  description: >
    A ridiculously fast site generator and engine.

  # You may supply any other metadata you like, though only as key-value pairs.
  # Those pairs will be supplied to your templates as hashmaps. The default
  # value is null/`~` since no other metadata are assumed.
#  metadata: ~
  metadata:
    foo: bar
    quux: 42
    baz: 13.3

# Specify the source for the content. It can be any folder at all; relative
# paths are resolved from the location of this configuration file.
content_directory: content

# Specify the destination for the generated site. As with the source directory,
# it can be any folder, and relative paths are resolved from the location of
# this configuration file.
#
# Tip: if you are using this with [GitHub Pages](https://pages.github.com), you
# may find it convenient to set this to "docs" so that you don't have to bother
# with `gh-pages` branch.
output_directory: output

# Define the structure of the site, by supplying the location of a set of
# templates to use in generating the site and a set of "taxonomies" which define
# the *relationships* on the site. A taxonomy is a way of categorizing something
# relative to other things---but "category" is an overloaded term, and one you
# may well want to use to define one of those taxonomies! Common taxonomies you
# see around the web are tags (and hashtags), categories, author, and date, each
# of which provides a way of organizing content. You can define as many
# taxonomies as you like, and they may overlap (or not) in whatever way you
# choose.
#
# The `structure` may be configured in two ways:
#
# 1. By specifying the site structure configuration under the `structure` key
#    directly, as in the configuraiton below.
# 2. By specifying another configuration files, whose contents are identical to
#    the contents of the `structure` below (i.e. there is no top-level
#    `structure` key, only the fields which otherwise compose it).
#
# TODO/aspirational:
# Lightning supplies default layouts to match the behavior of Jekyll, Pelican,
# and Hugo. If you'd like to contribute a generator, please open a pull request
# on the repository!
structure:
  # configuration: <path/to/lightning-structure.yaml>

  # The `directory` may be specified as a relative or absolute path. By default,
  # it is defined as a relative path from the root of the directory in which you
  # ran `lx init`. If you want to develop your site structure separately
  directory: layout

  # The index is the root of the site; it is the only *required* template. The
  # file may be named whatever you want, but this `index` key must be set.
  index: index.html

  # Each taxonomy may be one of "boolean", "multiple", or "temporal". These
  # options are mutually exclusive: a taxonomy may use time *or* it may define
  # its own structure, but sad to say, we don't get to define the structure of
  # time itself (unless you're a [Time Lord], in which case I have some
  # questions for you).
  #
  # [Time Lord]: https://en.wikipedia.org/wiki/Time_Lord
  #
  # "Multiple"-type taxonomies have as many variants as you define. You might
  # have both "Tech" and "Art" as categories, for example. Boolean taxonomies do
  # not have multiple variants; so e.g. in this setup an item is a "page" or it
  # is not---unlike the category taxonomy, where an item does not belong to the
  # "category" taxonomy so much as to one of the variants within the taxonomy.
  #
  # The "default" key allows you to specify a default value for items.
  #
  # The "required" key may be set for any field which is required for all pieces
  # of content (e.g. on many sites, "author" might be required).
  #
  # Use the "limit" field to specify whether a multiple-variant taxonomy may
  # have more than one field applied. The field may be implicitly set to null
  # by leaving it out, or explicitly set to null with `~`. If set, it must be a
  # number greater than 0. (Other values will be treated as errors.) See
  # examples below.
  #
  # Use the `hierarchical` field to specify (`true` or `false`) whether a
  # taxonomy may be nested, e.g. "Parent Category -> Child Category".
  # Taxonomies are implicitly defined with `hierarchical: false` if the field
  # is not included explicitly.
  #
  # If you wish to enforce that all items have dates associated with them, you
  # can you use the `temporal` type and set `required` to `true`. The `required`
  # flag is ignored entirely on `boolean` types, where it would make no sense.
  #
  # Every taxonomy must have at least an `item` template key defined; it may
  # also have a `list` template key defined. The `list` template will receive
  # all variants of the taxonomy, with all items associated with that taxonomy.
  # The `item` template will receive
  taxonomies:

    # Note that simply by leaving off the `limit` key, this taxonomy is
    # implicitly unlimited. In this case, that means you can have an arbitrary
    # number of authors for each post. Since there is no default tag, items
    # without tags set explicitly will not be associated with any tag. (You
    # could also specify this explicitly by setting `default: ~`.)
    - author:
        type: multiple
        required: true
        hierarchical: false
        templates:
          list: authors.html  # All authors
          item: author.html  # Everything authored by me

    # If we set a `limit` explicitly, the taxonomy allow only that many
    # variants per item. So in this case, an item may be in at most 1 category.
    # Here, we also set a default category of "Blog", so any item which does not
    # specify a category will automatically be included in the "Blog" category.
    - category:
        type: multiple
        default: Blog
        limit: 1
        required: false
        hierarchical: false
        templates:
          list: categories.html  # All categories
          item: category.html  # Things categorized as "Tech"

    # You can also make an unlimited taxonomy explicitly, by setting the
    # `limit` to `~`, which is "null" in YAML. So here, a post may have as many
    # tags as you like.
    - tag:
        type: multiple
        limit: ~
        required: false
        hierarchical: false
        templates:
          list: tags.html  # All tags
          item: tag.html  # Things tagged "rust"

    # Note: the `date` taxonomy is normally implicit, and automatically
    # associated with any piece of content stamped with a `date` field. You
    # only need to define it explicitly if you want to customize the associated
    # templates, or if you want to use something besides `date` to specify the
    # time stamp for a given item. The `limit` field here is *always* ignored.
    - date:  # TODO: these might be wrong re:Pelican, so confirm
        type: temporal
        required: false
        templates:
          list: period_archives.html
          item: archives.html

    # It is easy to define a page-style taxonomy: simply use `type: binary` and
    # then on a piece of content set e.g. `page: true`. If you want all items
    # to belong to a taxonomy by default and to opt, you may set `default: true`.
    - page:
        type: binary
        hierarchical: true
        templates:
          # list: pages.html  # If I wanted a page where I listed all pages...
          item: page.html

  feeds:
    # If engine is commented out or removed, no feeds will be generated. If it
    # is included, a full RSS feed of every time-categorized item on the site
    # will be generated. (NOTE: If there are no `temporal` taxonomies, feed
    # items will will be generated.)
    engine: RSS  # `RSS` or `Atom`

    # Generate additional feeds be
    additional:

      # The 'taxonomies' block allows you to specify taxonomies for which you
      # wish to generate feeds for every variant. So in this setup, we will be
      # generating feeds for each category and tag on the site. The generated
      # feeds will be <name of taxonomy item> - <site name>. For example, that
      # might be 'Tech - Chris Krycho' if it were for the "Tech" category on
      # my personal website.
      taxonomies:
        - category
        - tag

      # TODO: Something like this---
      custom:
        - Art and Tech:
            taxonomies:
              - category: art
              - category: tech
        - Family Poetry:
            taxonomies:
              - tag: family
              - tag: poetry


  # Define rules for other content to include or exclude.
  other_content:
    copy:
      - static
      - extra

    exclude: ~

  # TODO: how to handle "formats", e.g. link-blog posts, images, etc. And, in my
  #       case, quotes, poetry, and so on.
